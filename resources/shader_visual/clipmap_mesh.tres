[gd_resource type="VisualShader" load_steps=33 format=3 uid="uid://bq6brqow8lsc5"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_1yx8p"]
size = Vector2(1035.16, 445.229)
expression = "NORMAL_ALBEDO = unpack_normalmap_texture(texture(normalmap_input, UVoffset));
vec3 terrain_normal = unpack_normalmap_texture(texture(normalmap_input, UVoffset)) * u_terrain_normal_basis;
terrain_normal = normalize(terrain_normal);
NORMAL = (VIEW_MATRIX * (vec4(terrain_normal, 0.0))).xyz;
"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_t2qwr"]
parameter_name = "Base_Texture"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_jo7h4"]
parameter_name = "Slope_Texture"
color_default = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_3do0p"]
source = 5

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_823pc"]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_3jbjh"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_1u0od"]
parameter_name = "texture_UV_scale"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_wirb8"]
parameter_name = "slope_coverage"
hint = 1
min = -1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_0math"]
parameter_name = "texture_blend_range"
hint = 1
default_value = 1.0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_xsv1v"]
parameter_name = "normalmap_fragment_copy"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_wr4jk"]
size = Vector2(1243.03, 572.411)
expression = "float coverage_plus_range = slope_coverage_input + texture_blend_range_input;
float weight = clamp((normal_input.y - slope_coverage_input) / (coverage_plus_range - slope_coverage_input), 0.0, 1.0);

vec4 blended_color = mix(slope_texture_input, base_texture_input, weight);

Albedo_Output = mix(base_texture_input, blended_color, step(normal_input.y, coverage_plus_range));"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ocgxv"]
input_name = "view_matrix"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_o70rr"]
parameter_name = "uv_x_frag"
hint = 2
min = -100.0
max = 100.0
step = 0.001

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5ojxt"]
parameter_name = "uv_z_frag"
hint = 2
min = -100.0
max = 100.0
step = 0.001

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_b7spe"]
op_type = 0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_s2jdo"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_rd4tk"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_gu4x2"]
source = 5

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_65c0s"]
parameter_name = "normalmap_depth_value"
hint = 2
max = 18.0
step = 0.001
default_value_enabled = true

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vjo22"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_lds7x"]
parameter_name = "normalmap"
texture_type = 2

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_sb1cw"]
size = Vector2(553.167, 285.189)
expression = "uniform mat3 u_terrain_normal_basis;

vec3 unpack_normalmap_texture(vec4 input_texture) 
{
vec3 normal = ((input_texture.xzy) * 2.0) - vec3(1.0);
normal.z = normal.z * -1.0;
return normal;
}"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_227sm"]
size = Vector2(1016.05, 213.493)
expression = "NORMAL = unpack_normalmap_texture(texture(normalmap_input, UVoffset)) * u_terrain_normal_basis;"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_cptrf"]
parameter_name = "heightmap"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_uwm1w"]
size = Vector2(1083.99, 413.266)
expression = "vec3 world_vertex = VERTEX + MODEL_MATRIX[3].xyz + (float(textureSize(heightmap,heightmap_mipmap_lvl).x)/2.0);
vec2 texture_position = world_vertex.xz/float(textureSize(heightmap,heightmap_mipmap_lvl).x);
vertex_y = vec3(VERTEX.x, texture(heightmap, texture_position).g * heightmap_height_value, VERTEX.z);"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_obei4"]
parameter_name = "uv_x"
hint = 2
min = -100.0
max = 100.0
step = 0.001

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_p2ofv"]
parameter_name = "uv_z"
hint = 2
min = -100.0
max = 100.0
step = 0.001

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_6otf4"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_n6p0k"]
op_type = 0

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_scye6"]
parameter_name = "heightmap_mipmap_lvl"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_02srf"]
parameter_name = "heightmap_height_value"
hint = 2
max = 500.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_srkwl"]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_toon;

uniform sampler2D heightmap;
uniform int heightmap_mipmap_lvl = 0;
uniform float heightmap_height_value : hint_range(0, 500, 0.10000000149012);
uniform float uv_x : hint_range(-100, 100, 0.0010000000475);
uniform float uv_z : hint_range(-100, 100, 0.0010000000475);
uniform sampler2D normalmap : hint_normal;
uniform float texture_UV_scale;
uniform float uv_x_frag : hint_range(-100, 100, 0.0010000000475);
uniform float uv_z_frag : hint_range(-100, 100, 0.0010000000475);
uniform sampler2D Base_Texture : repeat_enable;
uniform sampler2D Slope_Texture : hint_default_black, repeat_enable;
uniform float slope_coverage : hint_range(-1, 1);
uniform float texture_blend_range : hint_range(0, 1);
uniform sampler2D normalmap_fragment_copy;
uniform float normalmap_depth_value : hint_range(0, 18, 0.0010000000475) = 0;


// GlobalExpression:0
	uniform mat3 u_terrain_normal_basis;
	
	vec3 unpack_normalmap_texture(vec4 input_texture) 
	{
	vec3 normal = ((input_texture.xzy) * 2.0) - vec3(1.0);
	normal.z = normal.z * -1.0;
	return normal;
	}

void vertex() {
// Input:9
	vec3 n_out9p0 = VERTEX;


// IntParameter:32
	int n_out32p0 = heightmap_mipmap_lvl;


// FloatParameter:6
	float n_out6p0 = heightmap_height_value;


	vec3 n_out23p0;
// Expression:23
	n_out23p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 world_vertex = n_out9p0 + MODEL_MATRIX[3].xyz + (float(textureSize(heightmap,n_out32p0).x)/2.0);
		vec2 texture_position = world_vertex.xz/float(textureSize(heightmap,n_out32p0).x);
		n_out23p0 = vec3(n_out9p0.x, texture(heightmap, texture_position).g * n_out6p0, n_out9p0.z);
	}


// Input:14
	vec2 n_out14p0 = UV;


// FloatParameter:24
	float n_out24p0 = uv_x;


// FloatParameter:25
	float n_out25p0 = uv_z;


// VectorCompose:31
	vec2 n_out31p0 = vec2(n_out24p0, n_out25p0);


// UVFunc:29
	vec2 n_in29p1 = vec2(1.00000, 1.00000);
	vec2 n_out29p0 = n_out31p0 * n_in29p1 + n_out14p0;


	vec3 n_out18p0;
// Expression:18
	n_out18p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out18p0 = unpack_normalmap_texture(texture(normalmap, n_out29p0)) * u_terrain_normal_basis;
	}


// Output:0
	VERTEX = n_out23p0;
	NORMAL = n_out18p0;


}

void fragment() {
// FloatParameter:29
	float n_out29p0 = texture_UV_scale;


// Input:59
	vec2 n_out59p0 = UV;


// FloatParameter:55
	float n_out55p0 = uv_x_frag;


// FloatParameter:56
	float n_out56p0 = uv_z_frag;


// VectorCompose:57
	vec2 n_out57p0 = vec2(n_out55p0, n_out56p0);


// UVFunc:58
	vec2 n_in58p1 = vec2(1.00000, 1.00000);
	vec2 n_out58p0 = n_out57p0 * n_in58p1 + n_out59p0;


// VectorOp:28
	vec2 n_out28p0 = vec2(n_out29p0) * n_out58p0;


	vec4 n_out25p0;
// Texture2D:25
	n_out25p0 = texture(Base_Texture, n_out28p0);


	vec4 n_out26p0;
// Texture2D:26
	n_out26p0 = texture(Slope_Texture, n_out28p0);


// FloatParameter:33
	float n_out33p0 = slope_coverage;


// FloatParameter:38
	float n_out38p0 = texture_blend_range;


// Input:5
	mat4 n_out5p0 = VIEW_MATRIX;


	vec3 n_out2p0;
	vec3 n_out2p1;
// Expression:2
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	n_out2p1 = vec3(0.0, 0.0, 0.0);
	{
		n_out2p1 = unpack_normalmap_texture(texture(normalmap_fragment_copy, n_out58p0));
		vec3 terrain_normal = unpack_normalmap_texture(texture(normalmap_fragment_copy, n_out58p0)) * u_terrain_normal_basis;
		terrain_normal = normalize(terrain_normal);
		n_out2p0 = (n_out5p0 * (vec4(terrain_normal, 0.0))).xyz;
		
	}


	vec4 n_out48p0;
// Expression:48
	n_out48p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		float coverage_plus_range = n_out33p0 + n_out38p0;
		float weight = clamp((n_out2p1.y - n_out33p0) / (coverage_plus_range - n_out33p0), 0.0, 1.0);
		
		vec4 blended_color = mix(n_out26p0, n_out25p0, weight);
		
		n_out48p0 = mix(n_out25p0, blended_color, step(n_out2p1.y, coverage_plus_range));
	}


	vec4 n_out6p0;
// Texture2D:6
	n_out6p0 = texture(normalmap_fragment_copy, n_out58p0);


// FloatParameter:7
	float n_out7p0 = normalmap_depth_value;


// Output:0
	ALBEDO = vec3(n_out48p0.xyz);
	NORMAL = n_out2p0;
	NORMAL_MAP = vec3(n_out6p0.xyz);
	NORMAL_MAP_DEPTH = n_out7p0;


}
"
graph_offset = Vector2(-1221.48, -165.508)
modes/specular = 1
nodes/vertex/0/position = Vector2(340, 140)
nodes/vertex/2/node = SubResource("VisualShaderNodeTexture2DParameter_cptrf")
nodes/vertex/2/position = Vector2(-1640, -440)
nodes/vertex/6/node = SubResource("VisualShaderNodeFloatParameter_02srf")
nodes/vertex/6/position = Vector2(-1900, -240)
nodes/vertex/9/node = SubResource("VisualShaderNodeInput_srkwl")
nodes/vertex/9/position = Vector2(-1180, -240)
nodes/vertex/14/node = SubResource("VisualShaderNodeInput_vjo22")
nodes/vertex/14/position = Vector2(-2160, 80)
nodes/vertex/15/node = SubResource("VisualShaderNodeTexture2DParameter_lds7x")
nodes/vertex/15/position = Vector2(-1460, 300)
nodes/vertex/17/node = SubResource("VisualShaderNodeGlobalExpression_sb1cw")
nodes/vertex/17/position = Vector2(-900, 500)
nodes/vertex/17/size = Vector2(553.167, 285.189)
nodes/vertex/17/input_ports = ""
nodes/vertex/17/output_ports = ""
nodes/vertex/17/expression = "uniform mat3 u_terrain_normal_basis;

vec3 unpack_normalmap_texture(vec4 input_texture) 
{
vec3 normal = ((input_texture.xzy) * 2.0) - vec3(1.0);
normal.z = normal.z * -1.0;
return normal;
}"
nodes/vertex/18/node = SubResource("VisualShaderNodeExpression_227sm")
nodes/vertex/18/position = Vector2(-900, 280)
nodes/vertex/18/size = Vector2(1016.05, 213.493)
nodes/vertex/18/input_ports = "0,3,UVoffset;1,8,normalmap_input;"
nodes/vertex/18/output_ports = "0,4,NORMAL;"
nodes/vertex/18/expression = "NORMAL = unpack_normalmap_texture(texture(normalmap_input, UVoffset)) * u_terrain_normal_basis;"
nodes/vertex/23/node = SubResource("VisualShaderNodeExpression_uwm1w")
nodes/vertex/23/position = Vector2(-1180, -160)
nodes/vertex/23/size = Vector2(1083.99, 413.266)
nodes/vertex/23/input_ports = "0,4,VERTEX;1,8,heightmap;2,1,heightmap_mipmap_lvl;3,0,heightmap_height_value;"
nodes/vertex/23/output_ports = "0,4,vertex_y;"
nodes/vertex/23/expression = "vec3 world_vertex = VERTEX + MODEL_MATRIX[3].xyz + (float(textureSize(heightmap,heightmap_mipmap_lvl).x)/2.0);
vec2 texture_position = world_vertex.xz/float(textureSize(heightmap,heightmap_mipmap_lvl).x);
vertex_y = vec3(VERTEX.x, texture(heightmap, texture_position).g * heightmap_height_value, VERTEX.z);"
nodes/vertex/24/node = SubResource("VisualShaderNodeFloatParameter_obei4")
nodes/vertex/24/position = Vector2(-2160, 180)
nodes/vertex/25/node = SubResource("VisualShaderNodeFloatParameter_p2ofv")
nodes/vertex/25/position = Vector2(-2160, 460)
nodes/vertex/29/node = SubResource("VisualShaderNodeUVFunc_6otf4")
nodes/vertex/29/position = Vector2(-1460, 140)
nodes/vertex/31/node = SubResource("VisualShaderNodeVectorCompose_n6p0k")
nodes/vertex/31/position = Vector2(-1800, 280)
nodes/vertex/32/node = SubResource("VisualShaderNodeIntParameter_scye6")
nodes/vertex/32/position = Vector2(-1900, -440)
nodes/vertex/connections = PackedInt32Array(9, 0, 23, 0, 2, 0, 23, 1, 14, 0, 29, 0, 24, 0, 31, 0, 25, 0, 31, 1, 31, 0, 29, 2, 32, 0, 23, 2, 15, 0, 18, 1, 29, 0, 18, 0, 6, 0, 23, 3, 23, 0, 0, 0, 18, 0, 0, 1)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_1yx8p")
nodes/fragment/2/position = Vector2(-1080, 580)
nodes/fragment/2/size = Vector2(1035.16, 445.229)
nodes/fragment/2/input_ports = "0,8,normalmap_input;1,3,UVoffset;2,7,VIEW_MATRIX;"
nodes/fragment/2/output_ports = "0,4,NORMAL;1,4,NORMAL_ALBEDO;"
nodes/fragment/2/expression = "NORMAL_ALBEDO = unpack_normalmap_texture(texture(normalmap_input, UVoffset));
vec3 terrain_normal = unpack_normalmap_texture(texture(normalmap_input, UVoffset)) * u_terrain_normal_basis;
terrain_normal = normalize(terrain_normal);
NORMAL = (VIEW_MATRIX * (vec4(terrain_normal, 0.0))).xyz;
"
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_xsv1v")
nodes/fragment/4/position = Vector2(-1580, 700)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_ocgxv")
nodes/fragment/5/position = Vector2(-1520, 1000)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_gu4x2")
nodes/fragment/6/position = Vector2(-1080, 1040)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatParameter_65c0s")
nodes/fragment/7/position = Vector2(-900, 1040)
nodes/fragment/23/node = SubResource("VisualShaderNodeTexture2DParameter_t2qwr")
nodes/fragment/23/position = Vector2(-2180, -840)
nodes/fragment/24/node = SubResource("VisualShaderNodeTexture2DParameter_jo7h4")
nodes/fragment/24/position = Vector2(-2180, -540)
nodes/fragment/25/node = SubResource("VisualShaderNodeTexture_3do0p")
nodes/fragment/25/position = Vector2(-1660, -620)
nodes/fragment/26/node = SubResource("VisualShaderNodeTexture_823pc")
nodes/fragment/26/position = Vector2(-1660, -320)
nodes/fragment/28/node = SubResource("VisualShaderNodeVectorOp_3jbjh")
nodes/fragment/28/position = Vector2(-2160, 40)
nodes/fragment/29/node = SubResource("VisualShaderNodeFloatParameter_1u0od")
nodes/fragment/29/position = Vector2(-2160, -140)
nodes/fragment/33/node = SubResource("VisualShaderNodeFloatParameter_wirb8")
nodes/fragment/33/position = Vector2(-1700, -140)
nodes/fragment/38/node = SubResource("VisualShaderNodeFloatParameter_0math")
nodes/fragment/38/position = Vector2(-1700, 100)
nodes/fragment/48/node = SubResource("VisualShaderNodeExpression_wr4jk")
nodes/fragment/48/position = Vector2(-1080, -40)
nodes/fragment/48/size = Vector2(1243.03, 572.411)
nodes/fragment/48/input_ports = "0,5,base_texture_input;1,5,slope_texture_input;2,0,slope_coverage_input;3,0,texture_blend_range_input;4,4,normal_input;"
nodes/fragment/48/output_ports = "0,5,Albedo_Output;"
nodes/fragment/48/expression = "float coverage_plus_range = slope_coverage_input + texture_blend_range_input;
float weight = clamp((normal_input.y - slope_coverage_input) / (coverage_plus_range - slope_coverage_input), 0.0, 1.0);

vec4 blended_color = mix(slope_texture_input, base_texture_input, weight);

Albedo_Output = mix(base_texture_input, blended_color, step(normal_input.y, coverage_plus_range));"
nodes/fragment/55/node = SubResource("VisualShaderNodeFloatParameter_o70rr")
nodes/fragment/55/position = Vector2(-2220, 560)
nodes/fragment/56/node = SubResource("VisualShaderNodeFloatParameter_5ojxt")
nodes/fragment/56/position = Vector2(-2220, 840)
nodes/fragment/57/node = SubResource("VisualShaderNodeVectorCompose_b7spe")
nodes/fragment/57/position = Vector2(-1860, 660)
nodes/fragment/58/node = SubResource("VisualShaderNodeUVFunc_s2jdo")
nodes/fragment/58/position = Vector2(-1580, 540)
nodes/fragment/59/node = SubResource("VisualShaderNodeInput_rd4tk")
nodes/fragment/59/position = Vector2(-2220, 460)
nodes/fragment/connections = PackedInt32Array(4, 0, 2, 0, 5, 0, 2, 2, 4, 0, 6, 2, 23, 0, 25, 2, 24, 0, 26, 2, 28, 0, 25, 0, 28, 0, 26, 0, 33, 0, 48, 2, 38, 0, 48, 3, 55, 0, 57, 0, 56, 0, 57, 1, 57, 0, 58, 2, 59, 0, 58, 0, 58, 0, 6, 0, 26, 0, 48, 1, 7, 0, 0, 10, 29, 0, 28, 0, 48, 0, 0, 0, 2, 1, 48, 4, 25, 0, 48, 0, 58, 0, 2, 1, 58, 0, 28, 1, 2, 0, 0, 8, 6, 0, 0, 9)
